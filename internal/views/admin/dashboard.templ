package admin

import (
	"fmt"
	"github.com/Cyber-cicco/jardin-pc/.gen/jardinpc/model"
	"github.com/Cyber-cicco/jardin-pc/internal/views/components"
	"github.com/Cyber-cicco/jardin-pc/internal/views/components/svg"
)

var DB_NAVS = []components.NavLink{
	{
		Name: "Événements",
		Link: "/admin/events",
	},
	{
		Name: "Utilisateurs",
		Link: "/admin/users",
	},
}

templ DashBoardNav(links []components.NavLink) {
	<nav class="flex flex-col bg-gradient-to-b from-green-400 to-green-500 w-64 min-h-screen p-4 shadow-lg border-r-2 border-green-400">
		<div class="mb-8 p-2">
			<div class="flex items-center gap-2 text-white">
				<h1 class="text-xl font-bold font-poppins">Administration</h1>
				@svg.DollarSvg()
			</div>
		</div>
		<ul class="space-y-2">
			for _, link := range links {
				<li>
					<a
						hx-push-url="true"
						hx-get={ link.Link }
						hx-target="#inner"
						hx-swap="outerHTML"
						href={ templ.SafeURL(link.Link) }
						class="flex items-center gap-3 p-3 text-white rounded-lg transition-all duration-200 hover:bg-green-600 hover:shadow-md hover:translate-x-1"
					>
						if link.Name == "Événements" {
							@svg.EventsSvg()
						} else if link.Name == "Utilisateurs" {
							@svg.UserSvg()
						}
						<span class="font-medium">{ link.Name }</span>
					</a>
				</li>
			}
		</ul>
		<div class="mt-auto pt-4 border-t-2 border-green-600">
			<a
				href="/"
				class="flex items-center gap-3 p-3 text-white rounded-lg hover:bg-green-600 transition-colors"
			>
				@svg.ReturnSvg()
				<span>Retour au site</span>
			</a>
		</div>
	</nav>
}

templ EvenementDashBoard(before, after []*model.Evenement) {
	@components.Head("Administration Jardin")
	<body class="flex w-full h-full">
		@DashBoardNav(DB_NAVS)
		<main class="flex flex-col w-full bg-blue-50">
			@EvenementDashBoardSection(before, after)
		</main>
	</body>
}

templ AddEvtForm(err_map map[string]string, value_map map[string]string) {
	<form id="form" class="flex flex-col gap-4" hx-post="/admin/events" hx-target="#inner" hx-swap="outerHTML">
		@InnerForm(err_map, value_map)
	</form>
}

templ ModifyEventForm(err_map map[string]string, value_map map[string]string, event_id int64) {
	<form
		id="form"
		class="flex flex-col gap-4"
		hx-put={ "/admin/events/" + fmt.Sprintf("%d", event_id) + "/edit" }
		hx-target="#inner"
		hx-swap="outerHTML"
	>
		@InnerForm(err_map, value_map)
	</form>
}

templ InnerForm(err_map map[string]string, value_map map[string]string) {
	<div class="flex flex-col gap-2">
		<label class="text-blue-950 font-medium" for="title">Titre</label>
		<input
			class="border-green-400 px-3 py-2 border-2 rounded-lg text-blue-950"
			value={ value_map["title"] }
			type="text"
			id="title"
			name="title"
			required
		/>
		<div class="h-6 text-red-500">{ err_map["title"] }</div>
	</div>
	<div class="flex flex-col gap-2">
		<label class="text-blue-950 font-medium" for="description">Description</label>
		<textarea
			class="border-green-400 px-3 py-2 border-2 rounded-lg text-blue-950 h-32"
			id="description"
			name="description"
		> { value_map["description"] }</textarea>
		<div class="h-6 text-red-500">{ err_map["description"] }</div>
	</div>
	<div class="flex flex-col gap-2">
		<label class="text-blue-950 font-medium" for="date">Date</label>
		<input
			class="border-green-400 px-3 py-2 border-2 rounded-lg text-blue-950"
			type="datetime-local"
			id="date"
			name="date"
			value={ value_map["date"] }
			required
		/>
		<div class="h-6 text-red-500">{ err_map["date"] }</div>
	</div>
	<div class="flex justify-end gap-3 mt-4">
		<button
			type="button"
			onclick="this.closest('[data-modal]').hidden = true"
			class="px-4 py-2 bg-gray-300 text-blue-950 rounded-md hover:brightness-150"
		>
			Annuler
		</button>
		<button
			type="submit"
			class="px-4 py-2 bg-green-400 text-white rounded-md hover:brightness-150 font-bold"
		>
			Publier
		</button>
	</div>
}

templ ModalAddEvt(error_map map[string]string, value_map map[string]string, hidden bool) {
	@Modale(hidden, "modal_evt") {
		<div class="flex justify-between items-center mb-4">
			<h2 class="text-2xl font-bold text-blue-950">Nouvel événement</h2>
			<button onclick="this.closest('[data-modal]').hidden = true" class="text-blue-950 hover:text-green-600 text-2xl">&times;</button>
		</div>
		@AddEvtForm(error_map, value_map)
	}
}

templ ModaleModifyEvent(error_map map[string]string, value_map map[string]string, hidden bool, event_id int64) {
	@Modale(hidden, "modal_evt_modify") {
		<div class="flex justify-between items-center mb-4">
			<h2 class="text-2xl font-bold text-blue-950">Modifier l'événement</h2>
			<button onclick="this.closest('[data-modal]').hidden = true" class="text-blue-950 hover:text-green-600 text-2xl">&times;</button>
		</div>
		@ModifyEventForm(error_map, value_map, event_id)
	}
}

templ Modale(hidden bool, id string) {
	<!-- Modale -->
	<div id={ id } data-modal={ id } hidden?={ hidden } class="fixed inset-0 bg-black bg-opacity-50 items-center justify-center z-50">
		<div class="flex w-full h-full justify-center items-center">
			<div class="bg-blue-50 p-6 rounded-lg w-full max-w-2xl mx-4 border-2 border-green-400 shadow-md">
				{ children... }
			</div>
		</div>
	</div>
}

templ EvenementsGenericTab(evts []*model.Evenement) {
	<table class="w-full">
		<thead class="bg-green-50">
			<tr>
				<th class="text-left py-3 px-4 text-blue-950">Titre</th>
				<th class="text-left py-3 px-4 text-blue-950">Description</th>
				<th class="text-left py-3 px-4 text-blue-950">Date</th>
				<th class="text-left py-3 px-4 text-blue-950">Actions</th>
			</tr>
		</thead>
		<tbody>
			for _, event := range evts {
				<tr class="border-t border-green-100 hover:bg-green-50">
					<td class="py-3 px-4 text-blue-950">{ event.Title }</td>
					<td class="py-3 px-4 text-blue-950">
						if event.Description != nil {
							if len(*event.Description) > 50 {
								{ (*event.Description)[:50] }...
							} else {
								{ *event.Description }
							}
						}
					</td>
					<td class="py-3 px-4 text-blue-950">{ event.Date.Format("02/01/2006 15:04") }</td>
					<td class="py-3 px-4 text-blue-950">
						<div class="flex gap-2">
							<button
								hx-get={ "/admin/events/" + fmt.Sprintf("%d", event.ID) + "/edit" }
								hx-target="#modal_evt_modify"
								hx-swap="outerHTML"
								class="p-2 text-green-600 hover:bg-green-100 rounded-md"
							>
								@svg.PenSvg()
							</button>
							<button
								hx-delete={ "/admin/events/" + fmt.Sprintf("%d", event.ID) }
								hx-target="#inner"
								hx-swap="outerHTML"
								hx-confirm="Êtes-vous sûr de vouloir supprimer cet événement ?"
								class="p-2 text-red-600 hover:bg-red-100 rounded-md"
							>
								@svg.DeleteSvg()
							</button>
						</div>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

templ EvenementsTab(before, after []*model.Evenement) {
	<div class="flex flex-col w-full gap-8">
		<!-- Section Événements à venir -->
		<div class="bg-white rounded-lg w-full shadow-md p-6">
			<h4 class="text-xl font-bold text-blue-950 mb-4">Événements à venir</h4>
			@EvenementsGenericTab(after)
		</div>
		<div class="bg-white rounded-lg shadow-md p-6">
			<h4 class="text-xl font-bold text-blue-950 mb-4">Événements passés</h4>
			@EvenementsGenericTab(before)
		</div>
	</div>
}

templ EvenementDashBoardSection(before, after []*model.Evenement) {
	<section id="inner" class="flex gap-10 flex-col p-5 h-full w-full overflow-auto">
		<div class="flex items-center w-full gap-10 justify-center">
			<h3 class="text-3xl font-poppins text-center text-blue-950">Gestion des événements</h3>
		</div>
		<div class="flex gap-2 justify-self-end items-center justify-center">
			<span class="font-bold text-blue-950 text-xl">Ajouter</span>
			<button data-modal-trigger="modal_evt" class="w-[40px] h-[40px] hover:cursor-pointer hover:brightness-150 text-white rounded-full bg-green-500 font-bold flex items-center justify-center">+</button>
		</div>
		@EvenementsTab(before, after)
        @ModalAddEvt(make(map[string]string), make(map[string]string), true)
        <div id="modal_evt_modify"></div>
		<script>
            document.querySelectorAll("[data-modal]").forEach((el) => el.hidden = true)
        </script>
	</section>
}

templ UtilisateursDashBoard(users []*model.Utilisateur) {
	@components.Head("Administration Jardin")
	<body class="flex w-full h-full">
		@DashBoardNav(DB_NAVS)
		<main class="flex flex-col w-full bg-blue-50">
			@UtilisateursDashBoardSection(users)
		</main>
	</body>
}

templ UtilisateursDashBoardSection(users []*model.Utilisateur) {
	<section id="inner" class="flex gap-10 flex-col p-5 h-full w-full overflow-auto">
		<div class="flex items-center w-full gap-10 justify-center">
			<h3 class="text-3xl font-poppins text-center text-blue-950">Gestion des utilisateurs</h3>
		</div>
		<div class="bg-white rounded-lg w-full shadow-md p-6">
			<h4 class="text-xl font-bold text-blue-950 mb-4">Utilisateurs</h4>
			@UtilisateursTab(users)
		</div>
		<script>
            document.querySelectorAll("[data-modal]").forEach((el) => el.hidden = true)
        </script>
	</section>
}

templ UtilisateursTab(users []*model.Utilisateur) {
	<table class="w-full">
		<thead class="bg-green-50">
			<tr>
				<th class="text-left py-3 px-4 text-blue-950">Nom</th>
				<th class="text-left py-3 px-4 text-blue-950">Prenom</th>
				<th class="text-left py-3 px-4 text-blue-950">Email</th>
				<th class="text-left py-3 px-4 text-blue-950">Roles</th>
				<th class="text-left py-3 px-4 text-blue-950">Actions</th>
			</tr>
		</thead>
		<tbody>
			for _, user := range users {
				<tr class="border-t border-green-100 hover:bg-green-50">
					<td class="py-3 px-4 text-blue-950">{ user.Nom }</td>
					<td class="py-3 px-4 text-blue-950">{ user.Prenom }</td>
					<td class="py-3 px-4 text-blue-950">{ user.Email }</td>
					<td class="py-3 px-4 text-blue-950">{ user.Role }</td>
					<td class="py-3 px-4 text-blue-950">
						<div class="flex gap-2">
							<button
								hx-get={ "/admin/events/" + fmt.Sprintf("%d", user.ID) + "/edit" }
								hx-target="#modal_evt"
								hx-swap="outerHTML"
								class="p-2 text-green-600 hover:bg-green-100 rounded-md"
							>
								@svg.PenSvg()
							</button>
						</div>
					</td>
				</tr>
			}
		</tbody>
	</table>
}
