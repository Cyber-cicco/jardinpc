//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ForgottenPasswordAttempt = newForgottenPasswordAttemptTable("jardinpc", "forgotten_password_attempt", "")

type forgottenPasswordAttemptTable struct {
	mysql.Table

	// Columns
	ID             mysql.ColumnInteger
	DateDemande    mysql.ColumnTimestamp
	LienChangement mysql.ColumnString
	Active         mysql.ColumnBool
	UtilisateurID  mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ForgottenPasswordAttemptTable struct {
	forgottenPasswordAttemptTable

	NEW forgottenPasswordAttemptTable
}

// AS creates new ForgottenPasswordAttemptTable with assigned alias
func (a ForgottenPasswordAttemptTable) AS(alias string) *ForgottenPasswordAttemptTable {
	return newForgottenPasswordAttemptTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ForgottenPasswordAttemptTable with assigned schema name
func (a ForgottenPasswordAttemptTable) FromSchema(schemaName string) *ForgottenPasswordAttemptTable {
	return newForgottenPasswordAttemptTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ForgottenPasswordAttemptTable with assigned table prefix
func (a ForgottenPasswordAttemptTable) WithPrefix(prefix string) *ForgottenPasswordAttemptTable {
	return newForgottenPasswordAttemptTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ForgottenPasswordAttemptTable with assigned table suffix
func (a ForgottenPasswordAttemptTable) WithSuffix(suffix string) *ForgottenPasswordAttemptTable {
	return newForgottenPasswordAttemptTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newForgottenPasswordAttemptTable(schemaName, tableName, alias string) *ForgottenPasswordAttemptTable {
	return &ForgottenPasswordAttemptTable{
		forgottenPasswordAttemptTable: newForgottenPasswordAttemptTableImpl(schemaName, tableName, alias),
		NEW:                           newForgottenPasswordAttemptTableImpl("", "new", ""),
	}
}

func newForgottenPasswordAttemptTableImpl(schemaName, tableName, alias string) forgottenPasswordAttemptTable {
	var (
		IDColumn             = mysql.IntegerColumn("ID")
		DateDemandeColumn    = mysql.TimestampColumn("DateDemande")
		LienChangementColumn = mysql.StringColumn("LienChangement")
		ActiveColumn         = mysql.BoolColumn("Active")
		UtilisateurIDColumn  = mysql.IntegerColumn("UtilisateurID")
		allColumns           = mysql.ColumnList{IDColumn, DateDemandeColumn, LienChangementColumn, ActiveColumn, UtilisateurIDColumn}
		mutableColumns       = mysql.ColumnList{DateDemandeColumn, LienChangementColumn, ActiveColumn, UtilisateurIDColumn}
	)

	return forgottenPasswordAttemptTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		DateDemande:    DateDemandeColumn,
		LienChangement: LienChangementColumn,
		Active:         ActiveColumn,
		UtilisateurID:  UtilisateurIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
