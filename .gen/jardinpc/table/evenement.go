//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Evenement = newEvenementTable("jardinpc", "evenement", "")

type evenementTable struct {
	mysql.Table

	// Columns
	ID           mysql.ColumnInteger
	Title        mysql.ColumnString
	Description  mysql.ColumnString
	Date         mysql.ColumnTimestamp
	DateCreation mysql.ColumnTimestamp
	Illustration mysql.ColumnString
	CreateurID   mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EvenementTable struct {
	evenementTable

	NEW evenementTable
}

// AS creates new EvenementTable with assigned alias
func (a EvenementTable) AS(alias string) *EvenementTable {
	return newEvenementTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EvenementTable with assigned schema name
func (a EvenementTable) FromSchema(schemaName string) *EvenementTable {
	return newEvenementTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EvenementTable with assigned table prefix
func (a EvenementTable) WithPrefix(prefix string) *EvenementTable {
	return newEvenementTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EvenementTable with assigned table suffix
func (a EvenementTable) WithSuffix(suffix string) *EvenementTable {
	return newEvenementTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEvenementTable(schemaName, tableName, alias string) *EvenementTable {
	return &EvenementTable{
		evenementTable: newEvenementTableImpl(schemaName, tableName, alias),
		NEW:            newEvenementTableImpl("", "new", ""),
	}
}

func newEvenementTableImpl(schemaName, tableName, alias string) evenementTable {
	var (
		IDColumn           = mysql.IntegerColumn("ID")
		TitleColumn        = mysql.StringColumn("Title")
		DescriptionColumn  = mysql.StringColumn("Description")
		DateColumn         = mysql.TimestampColumn("Date")
		DateCreationColumn = mysql.TimestampColumn("DateCreation")
		IllustrationColumn = mysql.StringColumn("Illustration")
		CreateurIDColumn   = mysql.IntegerColumn("CreateurID")
		allColumns         = mysql.ColumnList{IDColumn, TitleColumn, DescriptionColumn, DateColumn, DateCreationColumn, IllustrationColumn, CreateurIDColumn}
		mutableColumns     = mysql.ColumnList{TitleColumn, DescriptionColumn, DateColumn, DateCreationColumn, IllustrationColumn, CreateurIDColumn}
	)

	return evenementTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Title:        TitleColumn,
		Description:  DescriptionColumn,
		Date:         DateColumn,
		DateCreation: DateCreationColumn,
		Illustration: IllustrationColumn,
		CreateurID:   CreateurIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
