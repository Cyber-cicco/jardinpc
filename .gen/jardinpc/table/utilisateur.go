//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Utilisateur = newUtilisateurTable("jardinpc", "utilisateur", "")

type utilisateurTable struct {
	mysql.Table

	// Columns
	ID             mysql.ColumnInteger
	Prenom         mysql.ColumnString
	Nom            mysql.ColumnString
	Role           mysql.ColumnString
	DateCreation   mysql.ColumnTimestamp
	Password       mysql.ColumnString
	Email          mysql.ColumnString
	ActivationLink mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type UtilisateurTable struct {
	utilisateurTable

	NEW utilisateurTable
}

// AS creates new UtilisateurTable with assigned alias
func (a UtilisateurTable) AS(alias string) *UtilisateurTable {
	return newUtilisateurTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UtilisateurTable with assigned schema name
func (a UtilisateurTable) FromSchema(schemaName string) *UtilisateurTable {
	return newUtilisateurTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UtilisateurTable with assigned table prefix
func (a UtilisateurTable) WithPrefix(prefix string) *UtilisateurTable {
	return newUtilisateurTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UtilisateurTable with assigned table suffix
func (a UtilisateurTable) WithSuffix(suffix string) *UtilisateurTable {
	return newUtilisateurTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUtilisateurTable(schemaName, tableName, alias string) *UtilisateurTable {
	return &UtilisateurTable{
		utilisateurTable: newUtilisateurTableImpl(schemaName, tableName, alias),
		NEW:              newUtilisateurTableImpl("", "new", ""),
	}
}

func newUtilisateurTableImpl(schemaName, tableName, alias string) utilisateurTable {
	var (
		IDColumn             = mysql.IntegerColumn("ID")
		PrenomColumn         = mysql.StringColumn("Prenom")
		NomColumn            = mysql.StringColumn("Nom")
		RoleColumn           = mysql.StringColumn("Role")
		DateCreationColumn   = mysql.TimestampColumn("DateCreation")
		PasswordColumn       = mysql.StringColumn("Password")
		EmailColumn          = mysql.StringColumn("Email")
		ActivationLinkColumn = mysql.StringColumn("ActivationLink")
		allColumns           = mysql.ColumnList{IDColumn, PrenomColumn, NomColumn, RoleColumn, DateCreationColumn, PasswordColumn, EmailColumn, ActivationLinkColumn}
		mutableColumns       = mysql.ColumnList{PrenomColumn, NomColumn, RoleColumn, DateCreationColumn, PasswordColumn, EmailColumn, ActivationLinkColumn}
	)

	return utilisateurTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		Prenom:         PrenomColumn,
		Nom:            NomColumn,
		Role:           RoleColumn,
		DateCreation:   DateCreationColumn,
		Password:       PasswordColumn,
		Email:          EmailColumn,
		ActivationLink: ActivationLinkColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
