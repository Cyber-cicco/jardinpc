//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var BannedIP = newBannedIPTable("jardinpc", "banned_ip", "")

type bannedIPTable struct {
	mysql.Table

	// Columns
	IP mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type BannedIPTable struct {
	bannedIPTable

	NEW bannedIPTable
}

// AS creates new BannedIPTable with assigned alias
func (a BannedIPTable) AS(alias string) *BannedIPTable {
	return newBannedIPTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BannedIPTable with assigned schema name
func (a BannedIPTable) FromSchema(schemaName string) *BannedIPTable {
	return newBannedIPTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BannedIPTable with assigned table prefix
func (a BannedIPTable) WithPrefix(prefix string) *BannedIPTable {
	return newBannedIPTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BannedIPTable with assigned table suffix
func (a BannedIPTable) WithSuffix(suffix string) *BannedIPTable {
	return newBannedIPTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBannedIPTable(schemaName, tableName, alias string) *BannedIPTable {
	return &BannedIPTable{
		bannedIPTable: newBannedIPTableImpl(schemaName, tableName, alias),
		NEW:           newBannedIPTableImpl("", "new", ""),
	}
}

func newBannedIPTableImpl(schemaName, tableName, alias string) bannedIPTable {
	var (
		IPColumn       = mysql.StringColumn("Ip")
		allColumns     = mysql.ColumnList{IPColumn}
		mutableColumns = mysql.ColumnList{}
	)

	return bannedIPTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IP: IPColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
